#!/usr/bin/env node

const http = require('http');  
const io = require('socket.io')(3000);

var stations_cache = [];

io.on('connection', function (socket)
{
  var station = socket.handshake.query.room;  
  socket.join(station);
  
  // Check station exists in cache, create if not
  if(typeof stations_cache[station] == 'undefined')
  {
    stations_cache[station] = [];
    stations_cache[station]['data'] = '';
    stations_cache[station]['data_updated'] = 0;
    stations_cache[station]['image'] = '';
    stations_cache[station]['image_updated'] = 0;
  }
  
  if(stations_cache[station]['data_updated'] + 1000 > (new Date()).getTime())
  {
    socket.emit("data",stations_cache[station]['data']);
  }
  else
  {
    vivadatv_http_sync(socket.handshake.query.room, (data) =>
    {
      socket.emit("data",data);
    });
  }

  if(stations_cache[station]['image_updated'] + 1000 > (new Date()).getTime())
  {
    socket.emit("image",stations_cache[station]['image']);
  }
  else
  {
    vivadatv_image_sync(socket.handshake.query.room, (data) =>
    {
      socket.emit("image",data);
    });
  }
});

function vivadatv_http_sync(station_data, cb) {
  var params = station_data.split("|");
  vivadatv_http_callback = function(response)
  {
    var str = '';
    response.on('data', function (chunk) {
      str += chunk;
    });
    response.on('end', function () {
      cb(str);
    });
  };
  http.request(
    {
      host: "www.vivadatv.org",
      path: "/tutioune-ihm/tutioune-get.php?om_id="+params[0]+"&station_id="+params[1],
    },
    vivadatv_http_callback
  )
  .on('error', (e) => {
    console.log(`Error in vivadatv "tutioune-get.php" request: ${e.message}`);
  })
  .end();
}

function vivadatv_image_sync(station_data, cb) {
  var params = station_data.split("|");
  vivadatv_image_callback = function(response)
  {
    var data = [];
    response.on('data', function (chunk) {
      data.push(chunk);
    });
    response.on('end', function () {
      cb(Buffer.concat(data).toString('base64'));
    });
  };
  http.request(
    {
      host: "www.vivadatv.org",
      path: "/tutioune-ihm/picture.php?om_id="+params[0]+"&station_id="+params[1],
    },
    vivadatv_image_callback
  )
  .on('error', (e) => {
    console.log(`Error in vivadatv "picture.php" request: ${e.message}`);
  })
  .end();
}

setInterval(()=>
{
  var connectedRooms = findRooms();
  connectedRooms.forEach((e,i) =>
  {
    vivadatv_http_sync(e, (data) =>
    {
      if(data != stations_cache[e]['data'])
      {
        stations_cache[e]['data'] = data;
        stations_cache[e]['data_updated'] = (new Date()).getTime();
        io.to(e).emit("data",data);
      }
      else
      {
        stations_cache[e]['data_updated'] = (new Date()).getTime();
      }
    });
  });
},500);

setInterval(()=>
{
  var connectedRooms = findRooms();
  connectedRooms.forEach((e,i) =>
  {
    vivadatv_image_sync(e, (data) =>
    {
      if(data != stations_cache[e]['image'])
      {
        stations_cache[e]['image'] = data;
        stations_cache[e]['image_updated'] = (new Date()).getTime();
        io.to(e).emit("image",data);
      }
      else
      {
        stations_cache[e]['image_updated'] = (new Date()).getTime();
      }
    });
  });
},500);

function findRooms() {
  var availableRooms = [];
  var rooms = io.sockets.adapter.rooms;
  if (rooms) {
    for (var room in rooms) {
      if (!rooms[room].sockets.hasOwnProperty(room)) {
        availableRooms.push(room);
      }
    }
  }
  return availableRooms;
}


